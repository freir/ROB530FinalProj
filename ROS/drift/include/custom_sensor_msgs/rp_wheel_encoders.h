// Generated by gencpp from file racepak/rp_wheel_encoders.msg
// DO NOT EDIT!


#ifndef RACEPAK_MESSAGE_RP_WHEEL_ENCODERS_H
#define RACEPAK_MESSAGE_RP_WHEEL_ENCODERS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace racepak
{
template <class ContainerAllocator>
struct rp_wheel_encoders_
{
  typedef rp_wheel_encoders_<ContainerAllocator> Type;

  rp_wheel_encoders_()
    : front_left(0.0)
    , front_right(0.0)
    , rear_left(0.0)
    , rear_right(0.0)  {
    }
  rp_wheel_encoders_(const ContainerAllocator& _alloc)
    : front_left(0.0)
    , front_right(0.0)
    , rear_left(0.0)
    , rear_right(0.0)  {
  (void)_alloc;
    }



   typedef float _front_left_type;
  _front_left_type front_left;

   typedef float _front_right_type;
  _front_right_type front_right;

   typedef float _rear_left_type;
  _rear_left_type rear_left;

   typedef float _rear_right_type;
  _rear_right_type rear_right;





  typedef boost::shared_ptr< ::racepak::rp_wheel_encoders_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::racepak::rp_wheel_encoders_<ContainerAllocator> const> ConstPtr;

}; // struct rp_wheel_encoders_

typedef ::racepak::rp_wheel_encoders_<std::allocator<void> > rp_wheel_encoders;

typedef boost::shared_ptr< ::racepak::rp_wheel_encoders > rp_wheel_encodersPtr;
typedef boost::shared_ptr< ::racepak::rp_wheel_encoders const> rp_wheel_encodersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::racepak::rp_wheel_encoders_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::racepak::rp_wheel_encoders_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::racepak::rp_wheel_encoders_<ContainerAllocator1> & lhs, const ::racepak::rp_wheel_encoders_<ContainerAllocator2> & rhs)
{
  return lhs.front_left == rhs.front_left &&
    lhs.front_right == rhs.front_right &&
    lhs.rear_left == rhs.rear_left &&
    lhs.rear_right == rhs.rear_right;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::racepak::rp_wheel_encoders_<ContainerAllocator1> & lhs, const ::racepak::rp_wheel_encoders_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace racepak

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::racepak::rp_wheel_encoders_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::racepak::rp_wheel_encoders_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::racepak::rp_wheel_encoders_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::racepak::rp_wheel_encoders_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::racepak::rp_wheel_encoders_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::racepak::rp_wheel_encoders_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::racepak::rp_wheel_encoders_<ContainerAllocator> >
{
  static const char* value()
  {
    return "704d6e45a144b051d9261eee9f265122";
  }

  static const char* value(const ::racepak::rp_wheel_encoders_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x704d6e45a144b051ULL;
  static const uint64_t static_value2 = 0xd9261eee9f265122ULL;
};

template<class ContainerAllocator>
struct DataType< ::racepak::rp_wheel_encoders_<ContainerAllocator> >
{
  static const char* value()
  {
    return "racepak/rp_wheel_encoders";
  }

  static const char* value(const ::racepak::rp_wheel_encoders_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::racepak::rp_wheel_encoders_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 front_left\n"
"float32 front_right\n"
"float32 rear_left\n"
"float32 rear_right\n"
;
  }

  static const char* value(const ::racepak::rp_wheel_encoders_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::racepak::rp_wheel_encoders_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.front_left);
      stream.next(m.front_right);
      stream.next(m.rear_left);
      stream.next(m.rear_right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rp_wheel_encoders_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::racepak::rp_wheel_encoders_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::racepak::rp_wheel_encoders_<ContainerAllocator>& v)
  {
    s << indent << "front_left: ";
    Printer<float>::stream(s, indent + "  ", v.front_left);
    s << indent << "front_right: ";
    Printer<float>::stream(s, indent + "  ", v.front_right);
    s << indent << "rear_left: ";
    Printer<float>::stream(s, indent + "  ", v.rear_left);
    s << indent << "rear_right: ";
    Printer<float>::stream(s, indent + "  ", v.rear_right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RACEPAK_MESSAGE_RP_WHEEL_ENCODERS_H
